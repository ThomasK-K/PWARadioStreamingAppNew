#+TITLE: PWARadioStreamingApp PWA - Entwicklerhandbuch
#+AUTHOR: Project Team
#+DATE: 2025-06-17

* PWARadioStreamingApp

Ein umfassendes Entwicklerhandbuch für die PWARadioStreamingApp Progressive Web App.

** Projektübersicht
   
Diese PWA wurde mit React 18, TypeScript und Vite entwickelt und bietet folgende Kernfunktionalitäten:
- PWARadioStreamingApp mit LocalStorage-Persistenz
- Countdown-Timer
- MPD-Integration
- Web-Radio-Streaming
- PWA-Features (Offline-Unterstützung, Installation)
- Dark Mode und anpassbare Farbschemata

** Projektstruktur

#+BEGIN_SRC
/public             # Statische Assets und PWA-Icons
/src                # Quellcode
  /assets           # Bilder und andere Assets
  /components       # React-Komponenten
  /data             # Daten-Handler (z.B. MPD-Playlist-Fetcher)
  /state            # Recoil State Management
  /styles           # CSS-Dateien
  /types            # TypeScript-Typdefinitionen
  /utils            # Hilfs-Utilities
  App.tsx           # Hauptkomponente
  main.tsx          # Einstiegspunkt
#+END_SRC

** Entwicklungsumgebung

*** Setup

#+BEGIN_SRC bash
# Abhängigkeiten installieren
npm install

# Entwicklungsserver starten
npm run dev
#+END_SRC

*** Konfiguration

**** Vite
Vite ist als Build-Tool konfiguriert. Die Konfiguration befindet sich in =vite.config.ts=.

#+BEGIN_SRC typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { VitePWA } from 'vite-plugin-pwa'

export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'masked-icon.svg'],
      manifest: {
        name: 'PWARadioStreamingApp',
        short_name: 'PWARadioStreamingApp',
        description: 'Eine einfache PWARadioStreamingApp Progressive Web App',
        theme_color: '#ffffff',
        icons: [
          {
            src: 'pwa-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: 'pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png',
            purpose: 'any maskable'
          }
        ]
      }
    })
  ],
})
#+END_SRC

**** TypeScript
Die TypeScript-Konfiguration ist in =tsconfig.json= definiert.

** Komponenten


#+BEGIN_SRC typescript
// Kernfunktionen
- Zähler erhöhen/verringern
- Wert zurücksetzen
- Wert in localStorage speichern
#+END_SRC

*** Countdown
Der Countdown-Timer mit konfigurierbaren Einstellungen:

#+BEGIN_SRC typescript
// Kernfunktionen
- Timer starten/stoppen/zurücksetzen
- Zeit einstellen
- Benachrichtigung bei Ablauf
#+END_SRC

*** Settings
Einstellungskomponente für App-Konfiguration:

#+BEGIN_SRC typescript
// Konfigurationsmöglichkeiten
- Theme (Light/Dark/System)
- Farschema (Blau/Grün/Lila)
- Radio-Modus (MPD/Web-Radio)
- MPD Server-URLs verwalten
- Update-Intervall für Songinformationen
#+END_SRC

*** TabContainer
Container für Tab-Navigation zwischen den Hauptkomponenten.

** State Management

Die Anwendung verwendet Recoil für das State Management:

#+BEGIN_SRC typescript
// State Atoms
- mpdUrlsState - Liste der MPD-Server-URLs
- selectedMpdUrlState - Aktuell ausgewählte URL
- radioModeState - Aktueller Radio-Modus
- songUpdateInterval - Update-Intervall für Songinformationen
#+END_SRC

** Datenpersistenz

Die Datenpersistenz erfolgt mit localStorage, wobei eine robuste Fehlerbehandlung implementiert ist:

#+BEGIN_SRC typescript
// Utilities für sicheren localStorage-Zugriff
- safeGetItem - Sicheres Lesen mit Fallback
- safeSetItem - Sicheres Schreiben mit Fehlerbehandlung
- cleanupInvalidStorageItems - Bereinigung ungültiger Daten
#+END_SRC

** PWA-Funktionalität

Die PWA-Unterstützung umfasst:
- Service Worker für Offline-Funktionalität
- App-Manifest für Installation
- Update-Mechanismus mit Benachrichtigungen

** Erweiterungen

Bei der Implementierung neuer Features bitte folgende Best Practices beachten:
- Modulare Komponenten erstellen
- Recoil für globalen State verwenden
- Typen in /types/ definieren
- Utilities für wiederholte Funktionen erstellen
- CSS-Module für komponentenspezifisches Styling nutzen
- Barrierefreiheit berücksichtigen
- Mobile-First Design umsetzen

** Docker-Unterstützung

Die Anwendung kann in einem Docker-Container ausgeführt werden:

#+BEGIN_SRC bash
# Container bauen
docker build -t counterapp .

# Container starten
docker run -p 8080:80 counterapp
#+END_SRC

** Build und Deployment

#+BEGIN_SRC bash
# Produktionsbuild erstellen
npm run build

# Build-Preview starten (für Tests)
npm run preview
#+END_SRC
